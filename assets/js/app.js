/**
 * MakeMyWay - Application de g√©n√©ration de parcours
 */

class MakeMyWayApp {
    constructor() {
        this.map = null;
        this.markers = [];
        this.routePolyline = null;
        this.startPoint = null;
        this.endPoint = null;
        this.pois = [];
        
        // Cache pour optimiser les performances
        this.routeCache = new Map();
        this.snapCache = new Map();
        
        // Nettoyage automatique du cache (toutes les 10 minutes)
        setInterval(() => this.cleanupCache(), 10 * 60 * 1000);
        
        // Configuration POI
        this.poiCategories = [
            { id: 'parc', name: 'Parcs et jardins', icon: 'üå≥', queries: ['parc', 'jardin public'] },
            { id: 'monument', name: 'Monuments', icon: 'üèõÔ∏è', queries: ['monument', 'ch√¢teau'] },
            { id: 'eau', name: 'Points d\'eau', icon: 'üíß', queries: ['lac', 'rivi√®re'] },
            { id: 'culture', name: 'Lieux culturels', icon: 'üé≠', queries: ['mus√©e', 'th√©√¢tre'] }
        ];
    }

    async init() {
        console.log('üöÄ Initialisation de MakeMyWay...');
        
        try {
            this.initializeMap();
            this.setupEventListeners();
            this.setupAutocomplete();
            this.setupUI();
            
            console.log('‚úÖ MakeMyWay initialis√© avec succ√®s');
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'initialisation:', error);
            this.showError('Erreur lors de l\'initialisation de l\'application');
        }
    }

    initializeMap() {
        if (typeof L === 'undefined') {
            throw new Error('Leaflet n\'est pas charg√©');
        }

        const mapContainer = document.getElementById('map');
        if (!mapContainer) {
            throw new Error('Conteneur de carte non trouv√©');
        }

        // Cr√©er la carte
        this.map = L.map('map').setView([48.8566, 2.3522], 12);
        
        // Ajouter les tuiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '¬© OpenStreetMap contributors',
            maxZoom: 19
        }).addTo(this.map);

        // √âv√©nements de carte
        this.map.on('click', (e) => this.handleMapClick(e));
        
        console.log('üó∫Ô∏è Carte initialis√©e');
    }

    setupEventListeners() {
        // Bouton g√©n√©rer
        const generateBtn = document.getElementById('generateBtn');
        if (generateBtn) {
            generateBtn.addEventListener('click', () => this.generateRoute());
        }

        // Bouton reset
        const resetBtn = document.getElementById('resetBtn');
        if (resetBtn) {
            resetBtn.addEventListener('click', () => this.reset());
        }

        // Bouton export
        const exportBtn = document.getElementById('exportBtn');
        if (exportBtn) {
            exportBtn.addEventListener('click', () => this.exportGPX());
        }

        // Bouton position
        const useLocationBtn = document.getElementById('useLocationBtn');
        if (useLocationBtn) {
            useLocationBtn.addEventListener('click', () => this.useCurrentLocation());
        }

        // Slider distance
        const distanceSlider = document.getElementById('targetDistance');
        const distanceValue = document.getElementById('distanceValue');
        if (distanceSlider && distanceValue) {
            distanceSlider.addEventListener('input', (e) => {
                distanceValue.textContent = e.target.value + ' km';
            });
        }

        // Gestion POI
        const addPOIBtn = document.getElementById('addPOIBtn');
        if (addPOIBtn) {
            addPOIBtn.addEventListener('click', () => this.addCustomPOI());
        }

        const poiInput = document.getElementById('poiInput');
        if (poiInput) {
            poiInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    this.addCustomPOI();
                }
            });
            this.setupPOIAutocomplete(poiInput);
        }

        // Gestion des onglets POI
        const poiTabs = document.querySelectorAll('.poi-tab');
        poiTabs.forEach(tab => {
            tab.addEventListener('click', (e) => {
                const tabName = e.currentTarget.dataset.tab;
                this.switchPOITab(tabName);
            });
        });

        // Gestion des presets POI
        const presetButtons = document.querySelectorAll('.preset-btn');
        presetButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const preset = e.currentTarget.dataset.preset;
                this.togglePOIPreset(preset, e.currentTarget);
            });
        });

        // Contr√¥les de carte
        const centerMapBtn = document.getElementById('centerMapBtn');
        if (centerMapBtn) {
            centerMapBtn.addEventListener('click', () => this.centerMapOnRoute());
        }

        const fullscreenBtn = document.getElementById('fullscreenBtn');
        if (fullscreenBtn) {
            fullscreenBtn.addEventListener('click', () => this.toggleFullscreen());
        }

        // Gestion du toggle "Retour au d√©part"
        const returnToStartToggle = document.getElementById('returnToStart');
        if (returnToStartToggle) {
            returnToStartToggle.addEventListener('change', (e) => {
                this.handleReturnToStartToggle(e.target.checked);
            });
        }

        // Boutons de suppression des points
        const clearStartBtn = document.getElementById('clearStartBtn');
        if (clearStartBtn) {
            clearStartBtn.addEventListener('click', () => this.removeStartPoint());
        }

        const clearEndBtn = document.getElementById('clearEndBtn');
        if (clearEndBtn) {
            clearEndBtn.addEventListener('click', () => this.removeEndPoint());
        }

        // Gestion de la bulle d'aide au survol
        const routeHelpBtn = document.getElementById('routeHelpBtn');
        const routeHelpBubble = document.getElementById('routeHelpBubble');

        if (routeHelpBtn && routeHelpBubble) {
            routeHelpBtn.addEventListener('mouseenter', () => {
                routeHelpBubble.style.display = 'block';
            });

            routeHelpBtn.addEventListener('mouseleave', () => {
                // D√©lai pour permettre √† l'utilisateur de passer sur la bulle
                setTimeout(() => {
                    if (!routeHelpBubble.matches(':hover') && !routeHelpBtn.matches(':hover')) {
                        routeHelpBubble.style.display = 'none';
                    }
                }, 100);
            });

            // Garder la bulle visible quand on survole la bulle elle-m√™me
            routeHelpBubble.addEventListener('mouseenter', () => {
                routeHelpBubble.style.display = 'block';
            });

            routeHelpBubble.addEventListener('mouseleave', () => {
                routeHelpBubble.style.display = 'none';
            });
        }

        console.log('üîó √âv√©nements configur√©s');
    }

    /**
     * Setup autocomplete for address and POI inputs
     */
    setupAutocomplete() {
        const startAddressInput = document.getElementById('startAddress');
        const endAddressInput = document.getElementById('endAddress');
        
        if (startAddressInput) {
            this.setupAddressAutocomplete(startAddressInput, 'startAddressSuggestions', 'start');
        }
        
        if (endAddressInput) {
            this.setupAddressAutocomplete(endAddressInput, 'endAddressSuggestions', 'end');
        }
        
        console.log('üîç Autocomplete setup complete');
    }

    /**
     * Configure l'autocompl√©tion pour un champ d'adresse
     */
    setupAddressAutocomplete(input, suggestionsId, type) {
        const suggestionsContainer = document.getElementById(suggestionsId);
        let searchTimeout;
        
        input.addEventListener('input', (e) => {
            const query = e.target.value.trim();
            
            // Effacer le timeout pr√©c√©dent
            if (searchTimeout) {
                clearTimeout(searchTimeout);
            }
            
            // Masquer les suggestions si la requ√™te est trop courte
            if (query.length < 3) {
                this.hideSuggestions(suggestionsContainer);
                return;
            }
            
            // D√©lai pour √©viter trop de requ√™tes
            searchTimeout = setTimeout(async () => {
                try {
                    const suggestions = await this.searchAddresses(query);
                    this.showAddressSuggestions(suggestions, suggestionsContainer, input, type);
                } catch (error) {
                    console.error('Erreur de recherche d\'adresses:', error);
                    this.hideSuggestions(suggestionsContainer);
                }
            }, 300);
        });
        
        // Masquer les suggestions quand on clique ailleurs
        input.addEventListener('blur', () => {
            setTimeout(() => {
                this.hideSuggestions(suggestionsContainer);
            }, 200);
        });
        
        input.addEventListener('focus', () => {
            if (input.value.length >= 3 && suggestionsContainer.children.length > 0) {
                suggestionsContainer.style.display = 'block';
            }
        });
    }

    /**
     * Recherche d'adresses via l'API Nominatim
     */
    async searchAddresses(query) {
        const url = `https://nominatim.openstreetmap.org/search?` +
            `format=json&` +
            `q=${encodeURIComponent(query)}&` +
            `limit=5&` +
            `countrycodes=fr&` +
            `addressdetails=1`;
        
        try {
            const response = await fetch(url, {
                headers: {
                    'Accept-Language': 'fr',
                    'User-Agent': 'RunMyWay/1.0'
                },
                signal: AbortSignal.timeout(5000)
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const data = await response.json();
            return data.map(item => ({
                display_name: item.display_name,
                lat: parseFloat(item.lat),
                lng: parseFloat(item.lon || item.lng),
                type: item.type,
                importance: item.importance || 0
            }));
        } catch (error) {
            console.error('Erreur API Nominatim:', error);
            return [];
        }
    }

    /**
     * Affiche les suggestions d'adresses
     */
    showAddressSuggestions(suggestions, container, input, type) {
        if (!container) return;
        
        container.innerHTML = '';
        container.style.display = 'none';
        
        if (suggestions.length === 0) {
            const noResults = document.createElement('div');
            noResults.className = 'suggestion-item';
            noResults.textContent = 'Aucune adresse trouv√©e';
            noResults.style.color = '#64748B';
            container.appendChild(noResults);
            container.style.display = 'block';
            return;
        }
        
        suggestions.forEach(suggestion => {
            const item = document.createElement('div');
            item.className = 'suggestion-item';
            item.innerHTML = `
                <div style="font-weight: 500;">${this.formatAddressName(suggestion.display_name)}</div>
                <div style="font-size: 0.8rem; color: #64748B; margin-top: 0.25rem;">
                    ${this.getAddressDetails(suggestion.display_name)}
                </div>
            `;
            
            item.addEventListener('click', () => {
                this.selectAddress(suggestion, input, type);
                this.hideSuggestions(container);
            });
            
            container.appendChild(item);
        });
        
        container.style.display = 'block';
    }

    /**
     * Formate le nom d'une adresse pour l'affichage
     */
    formatAddressName(displayName) {
        const parts = displayName.split(',');
        return parts[0] + (parts[1] ? ', ' + parts[1] : '');
    }

    /**
     * Extrait les d√©tails d'une adresse
     */
    getAddressDetails(displayName) {
        const parts = displayName.split(',');
        return parts.slice(2).join(',').trim();
    }

    /**
     * S√©lectionne une adresse dans les suggestions
     */
    selectAddress(suggestion, input, type) {
        input.value = this.formatAddressName(suggestion.display_name);
        
        const latlng = L.latLng(suggestion.lat, suggestion.lng);
        
        if (type === 'start') {
            this.setStartPoint(latlng);
            // Centrer la carte sur l'adresse
            this.map.setView(latlng, 15);
        } else if (type === 'end') {
            this.setEndPoint(latlng);
            // Ajuster la vue pour voir les deux points
            if (this.startPoint) {
                const bounds = L.latLngBounds([this.startPoint, latlng]);
                this.map.fitBounds(bounds, { padding: [50, 50] });
            } else {
                this.map.setView(latlng, 15);
            }
        }
        
        console.log(`‚úÖ ${type === 'start' ? 'D√©part' : 'Arriv√©e'} d√©fini:`, suggestion.display_name);
    }

    /**
     * Masque les suggestions
     */
    hideSuggestions(container) {
        if (container) {
            container.style.display = 'none';
        }
    }

    /**
     * Configure l'autocompl√©tion pour les POI personnalis√©s
     */
    setupPOIAutocomplete(input) {
        const suggestionsContainer = document.getElementById('poiSuggestions');
        let searchTimeout;
        
        input.addEventListener('input', (e) => {
            const query = e.target.value.trim();
            
            if (searchTimeout) {
                clearTimeout(searchTimeout);
            }
            
            if (query.length < 3) {
                this.hideSuggestions(suggestionsContainer);
                return;
            }
            
            searchTimeout = setTimeout(async () => {
                try {
                    // Rechercher autour du point de d√©part ou centre de la carte
                    const searchCenter = this.startPoint || this.map.getCenter();
                    const suggestions = await this.searchPOIs(query, searchCenter);
                    this.showPOISuggestions(suggestions, suggestionsContainer, input);
                } catch (error) {
                    console.error('Erreur de recherche POI:', error);
                    this.hideSuggestions(suggestionsContainer);
                }
            }, 300);
        });
        
        input.addEventListener('blur', () => {
            setTimeout(() => {
                this.hideSuggestions(suggestionsContainer);
            }, 200);
        });
    }

    /**
     * Recherche de POI via l'API Nominatim
     */
    async searchPOIs(query, centerPoint, radiusKm = 10) {
        const url = `https://nominatim.openstreetmap.org/search?` +
            `format=json&` +
            `q=${encodeURIComponent(query)}&` +
            `limit=8&` +
            `countrycodes=fr&` +
            `lat=${centerPoint.lat}&` +
            `lon=${centerPoint.lng}&` +
            `bounded=1&` +
            `viewbox=${centerPoint.lng - 0.1},${centerPoint.lat + 0.1},${centerPoint.lng + 0.1},${centerPoint.lat - 0.1}`;
        
        try {
            const response = await fetch(url, {
                headers: {
                    'Accept-Language': 'fr',
                    'User-Agent': 'RunMyWay/1.0'
                },
                signal: AbortSignal.timeout(5000)
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const data = await response.json();
            return data.map(item => ({
                name: item.display_name.split(',')[0],
                full_name: item.display_name,
                lat: parseFloat(item.lat),
                lng: parseFloat(item.lon || item.lng),
                type: item.type,
                class: item.class,
                importance: item.importance || 0
            })).filter(poi => {
                // Filtrer les types int√©ressants
                const interestingTypes = ['tourism', 'amenity', 'leisure', 'historic', 'natural'];
                return interestingTypes.includes(poi.class);
            });
        } catch (error) {
            console.error('Erreur API POI:', error);
            return [];
        }
    }

    /**
     * Affiche les suggestions de POI
     */
    showPOISuggestions(suggestions, container, input) {
        if (!container) return;
        
        container.innerHTML = '';
        container.style.display = 'none';
        
        if (suggestions.length === 0) {
            const noResults = document.createElement('div');
            noResults.className = 'suggestion-item';
            noResults.textContent = 'Aucun POI trouv√©';
            noResults.style.color = '#64748B';
            container.appendChild(noResults);
            container.style.display = 'block';
            return;
        }
        
        suggestions.forEach(suggestion => {
            const item = document.createElement('div');
            item.className = 'suggestion-item';
            item.innerHTML = `
                <div style="font-weight: 500;">${suggestion.name}</div>
                <div style="font-size: 0.8rem; color: #64748B; margin-top: 0.25rem;">
                    ${this.getPOITypeIcon(suggestion.type)} ${this.formatPOIType(suggestion.type, suggestion.class)}
                </div>
            `;
            
            item.addEventListener('click', () => {
                this.selectPOI(suggestion, input);
                this.hideSuggestions(container);
            });
            
            container.appendChild(item);
        });
        
        container.style.display = 'block';
    }

    /**
     * Obtient l'ic√¥ne pour un type de POI
     */
    getPOITypeIcon(type) {
        const icons = {
            attraction: 'üéØ',
            museum: 'üèõÔ∏è',
            park: 'üå≥',
            restaurant: 'üçΩÔ∏è',
            cafe: '‚òï',
            shop: 'üõí',
            church: '‚õ™',
            monument: 'üèõÔ∏è',
            fountain: '‚õ≤',
            garden: 'üå∫',
            default: 'üìç'
        };
        return icons[type] || icons.default;
    }

    /**
     * Formate le type de POI pour l'affichage
     */
    formatPOIType(type, poiClass) {
        const translations = {
            attraction: 'Attraction',
            museum: 'Mus√©e',
            park: 'Parc',
            restaurant: 'Restaurant',
            cafe: 'Caf√©',
            shop: 'Commerce',
            church: '√âglise',
            monument: 'Monument',
            fountain: 'Fontaine',
            garden: 'Jardin',
            tourism: 'Tourisme',
            amenity: 'Service',
            leisure: 'Loisir',
            historic: 'Historique',
            natural: 'Nature'
        };
        return translations[type] || translations[poiClass] || type;
    }

    /**
     * S√©lectionne un POI depuis les suggestions
     */
    selectPOI(poi, input) {
        input.value = poi.name;
        this.addPOIToList(poi);
    }

    /**
     * Ajoute un POI personnalis√©
     */
    async addCustomPOI() {
        const poiInput = document.getElementById('poiInput');
        if (!poiInput) return;
        
        const query = poiInput.value.trim();
        if (query.length < 2) {
            this.showError('Veuillez saisir un nom de lieu');
            return;
        }
        
        try {
            // Rechercher le POI
            const searchCenter = this.startPoint || this.map.getCenter();
            const pois = await this.searchPOIs(query, searchCenter);
            
            if (pois.length > 0) {
                const poi = pois[0]; // Prendre le premier r√©sultat
                this.addPOIToList(poi);
                poiInput.value = '';
            } else {
                // Cr√©er un POI g√©n√©rique bas√© sur la recherche d'adresse
                const addresses = await this.searchAddresses(query);
                if (addresses.length > 0) {
                    const address = addresses[0];
                    const genericPOI = {
                        name: this.formatAddressName(address.display_name),
                        full_name: address.display_name,
                        lat: address.lat,
                        lng: address.lng,
                        type: 'custom',
                        class: 'custom'
                    };
                    this.addPOIToList(genericPOI);
                    poiInput.value = '';
                } else {
                    this.showError('Aucun lieu trouv√© pour cette recherche');
                }
            }
        } catch (error) {
            console.error('Erreur ajout POI:', error);
            this.showError('Erreur lors de l\'ajout du POI');
        }
    }

    /**
     * Ajoute un POI √† la liste des POI s√©lectionn√©s
     */
    addPOIToList(poi) {
        // √âviter les doublons
        const exists = this.pois.find(p => 
            Math.abs(p.lat - poi.lat) < 0.001 && Math.abs(p.lng - poi.lng) < 0.001
        );
        
        if (exists) {
            this.showError('Ce POI est d√©j√† dans votre liste');
            return;
        }
        
        // Ajouter √† la liste
        this.pois.push(poi);
        this.updatePOIChips();
        
        // Ajouter un marqueur temporaire sur la carte
        this.addPOIMarker(poi);
        
        console.log(`‚úÖ POI ajout√©: ${poi.name}`);
    }

    /**
     * Met √† jour l'affichage des chips POI
     */
    updatePOIChips() {
        const chipsContainer = document.getElementById('poiChips');
        if (!chipsContainer) return;
        
        chipsContainer.innerHTML = '';
        
        this.pois.forEach((poi, index) => {
            const chip = document.createElement('div');
            chip.className = 'poi-chip';
            chip.innerHTML = `
                <span>${this.getPOITypeIcon(poi.type)} ${poi.name}</span>
                <button onclick="window.runMyWayApp.removePOI(${index})" title="Supprimer">√ó</button>
            `;
            chipsContainer.appendChild(chip);
        });
    }

    /**
     * Supprime un POI de la liste
     */
    removePOI(index) {
        if (index >= 0 && index < this.pois.length) {
            const poi = this.pois[index];
            this.pois.splice(index, 1);
            this.updatePOIChips();
            this.removePOIMarker(poi);
            console.log(`üóëÔ∏è POI supprim√©: ${poi.name}`);
        }
    }

    /**
     * Ajoute un marqueur POI sur la carte
     */
    addPOIMarker(poi) {
        const marker = L.circleMarker([poi.lat, poi.lng], {
            radius: 8,
            fillColor: '#F59E0B',
            color: 'white',
            weight: 2,
            opacity: 1,
            fillOpacity: 0.8
        }).addTo(this.map);
        
        marker.bindPopup(`<strong>${poi.name}</strong><br>${this.formatPOIType(poi.type, poi.class)}`);
        
        // Stocker la r√©f√©rence du marqueur avec le POI
        poi._marker = marker;
    }

    /**
     * Supprime un marqueur POI de la carte
     */
    removePOIMarker(poi) {
        if (poi._marker) {
            this.map.removeLayer(poi._marker);
            delete poi._marker;
        }
    }

    /**
     * Gestion des onglets POI
     */
    switchPOITab(tabName) {
        // Mettre √† jour les onglets
        document.querySelectorAll('.poi-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        document.querySelectorAll('.poi-tab-content').forEach(content => {
            content.classList.remove('active');
        });
        
        // Activer l'onglet s√©lectionn√©
        document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
        document.getElementById(`${tabName}-tab`).classList.add('active');
    }

    /**
     * Active/d√©sactive un preset POI
     */
    async togglePOIPreset(presetType, buttonElement) {
        const isActive = buttonElement.classList.contains('active');
        
        if (isActive) {
            // D√©sactiver le preset
            buttonElement.classList.remove('active');
            this.removePOIsByCategory(presetType);
        } else {
            // Activer le preset
            buttonElement.classList.add('active');
            await this.addPOIsByCategory(presetType);
        }
    }

    /**
     * Ajoute automatiquement des POI selon une cat√©gorie
     */
    async addPOIsByCategory(category) {
        if (!this.startPoint) {
            this.showError('Veuillez d\'abord d√©finir un point de d√©part');
            return;
        }

        try {
            const queries = this.getCategoryQueries(category);
            const searchCenter = this.startPoint;
            const maxPOIs = 3; // Limiter √† 3 POI par cat√©gorie
            
            console.log(`üîç Recherche POI cat√©gorie: ${category}`);
            
            for (const query of queries) {
                const pois = await this.searchPOIs(query, searchCenter);
                
                // Ajouter les meilleurs POI de cette recherche
                const filteredPOIs = pois
                    .filter(poi => !this.pois.some(existing => 
                        Math.abs(existing.lat - poi.lat) < 0.001 && 
                        Math.abs(existing.lng - poi.lng) < 0.001
                    ))
                    .slice(0, Math.max(1, Math.floor(maxPOIs / queries.length)));
                
                for (const poi of filteredPOIs) {
                    poi.category = category; // Marquer la cat√©gorie
                    this.addPOIToList(poi);
                }
                
                // D√©lai pour √©viter de surcharger l'API
                await new Promise(resolve => setTimeout(resolve, 200));
            }
            
            if (this.pois.filter(p => p.category === category).length === 0) {
                this.showError(`Aucun POI ${this.getCategoryName(category)} trouv√© dans cette zone`);
            } else {
                console.log(`‚úÖ POI ${category} ajout√©s`);
            }
            
        } catch (error) {
            console.error(`Erreur ajout POI ${category}:`, error);
            this.showError(`Erreur lors de la recherche de POI ${this.getCategoryName(category)}`);
        }
    }

    /**
     * Supprime les POI d'une cat√©gorie
     */
    removePOIsByCategory(category) {
        const poisToRemove = this.pois.filter(poi => poi.category === category);
        
        poisToRemove.forEach(poi => {
            const index = this.pois.indexOf(poi);
            if (index > -1) {
                this.removePOI(index);
            }
        });
        
        console.log(`üóëÔ∏è POI ${category} supprim√©s`);
    }

    /**
     * Obtient les requ√™tes de recherche pour une cat√©gorie
     */
    getCategoryQueries(category) {
        const queries = {
            nature: ['parc', 'jardin public', 'for√™t', 'lac'],
            culture: ['mus√©e', 'monument', '√©glise', 'th√©√¢tre'],
            sport: ['stade', 'piscine', 'gymnase', 'terrain de sport'],
            panorama: ['belv√©d√®re', 'point de vue', 'tour', 'colline'],
            eau: ['fontaine', 'lac', 'rivi√®re', 'canal'],
            shopping: ['march√©', 'centre commercial', 'rue commer√ßante']
        };
        
        return queries[category] || [category];
    }

    /**
     * Obtient le nom d'affichage d'une cat√©gorie
     */
    getCategoryName(category) {
        const names = {
            nature: 'Nature',
            culture: 'Culture', 
            sport: 'Sport',
            panorama: 'Panorama',
            eau: 'Points d\'eau',
            shopping: 'Shopping'
        };
        
        return names[category] || category;
    }

    setupUI() {
        // Configuration basique de l'interface
        this.updateDistanceSlider();
        
        // Initialiser l'√©tat du toggle "Retour au d√©part"
        this.handleReturnToStartToggle(false); // Par d√©faut d√©coch√©
        
        // Initialiser les limites du slider selon le mode par d√©faut
        this.initializeSliderLimits();
        
        console.log('üé® Interface configur√©e');
    }

    updateDistanceSlider() {
        const modeInputs = document.querySelectorAll('input[name="travelMode"]');
        const distanceSlider = document.getElementById('targetDistance');
        const maxLabel = document.getElementById('maxLabel');

        if (modeInputs && distanceSlider && maxLabel) {
            modeInputs.forEach(input => {
                input.addEventListener('change', () => {
                    const mode = input.value;
                    let maxDistance = 10;
                    
                    if (mode === 'running') maxDistance = 25;
                    if (mode === 'cycling') maxDistance = 80;
                    
                    // Ajuster la valeur actuelle si elle d√©passe le nouveau max
                    if (parseFloat(distanceSlider.value) > maxDistance) {
                        distanceSlider.value = maxDistance;
                        document.getElementById('distanceValue').textContent = maxDistance + ' km';
                    }
                    
                    distanceSlider.max = maxDistance;
                    maxLabel.textContent = maxDistance + 'km';
                    
                    console.log(`Mode ${mode}: Distance max ajust√©e √† ${maxDistance}km`);
                });
            });
        }
    }

    /**
     * Initialise les limites du slider selon le mode par d√©faut
     */
    initializeSliderLimits() {
        const distanceSlider = document.getElementById('targetDistance');
        const maxLabel = document.getElementById('maxLabel');
        const distanceValue = document.getElementById('distanceValue');
        
        if (distanceSlider && maxLabel) {
            // Mode par d√©faut : marche (walking)
            const defaultMax = 10;
            distanceSlider.max = defaultMax;
            maxLabel.textContent = defaultMax + 'km';
            
            // Si la valeur actuelle d√©passe le nouveau max, l'ajuster
            if (parseFloat(distanceSlider.value) > defaultMax) {
                distanceSlider.value = 5; // Valeur par d√©faut raisonnable
                if (distanceValue) {
                    distanceValue.textContent = '5 km';
                }
            }
            
            console.log(`Slider initialis√©: max ${defaultMax}km, valeur ${distanceSlider.value}km`);
        }
    }

    handleMapClick(event) {
        console.log('Clic sur la carte:', event.latlng);
        
        const returnToStart = document.getElementById('returnToStart')?.checked;
        
        if (!this.startPoint) {
            this.setStartPoint(event.latlng);
        } else if (!this.endPoint && !returnToStart) {
            this.setEndPoint(event.latlng);
        } else {
            // Si on a d√©j√† les deux points ou si retour au d√©part est activ√©,
            // remplacer le point de d√©part
            this.setStartPoint(event.latlng);
        }
    }

    setStartPoint(latlng) {
        // Supprimer le marqueur de d√©part existant
        if (this.startMarker) {
            this.map.removeLayer(this.startMarker);
        }

        // Cr√©er le nouveau marqueur de d√©part avec popup interactive et drag & drop
        this.startMarker = L.marker(latlng, {
            icon: L.divIcon({
                html: '<div class="custom-marker-start"><i class="fas fa-play"></i></div>',
                className: 'custom-marker-container',
                iconSize: [24, 24],
                iconAnchor: [12, 12]
            }),
            draggable: true
        }).addTo(this.map);

        // Events pour le marqueur de d√©part
        this.startMarker.on('dragstart', () => {
            console.log('ü§è D√©placement du point de d√©part...');
        });

        this.startMarker.on('dragend', (e) => {
            const newPos = e.target.getLatLng();
            this.startPoint = newPos;
            this.updateAddressField(newPos, 'startAddress');
            console.log('üìç Point de d√©part d√©plac√©:', newPos);
        });

        this.startMarker.on('contextmenu', (e) => {
            e.originalEvent.preventDefault();
            this.removeStartPoint();
        });

        // Ajouter popup interactive
        this.startMarker.bindPopup(`
            <div class="marker-popup">
                <strong><i class="fas fa-play"></i> Point de d√©part</strong>
                <div class="popup-tips">
                    <small>üí° Glissez pour d√©placer<br>üñ±Ô∏è Clic droit pour supprimer</small>
                </div>
                <div class="marker-actions">
                    <button onclick="window.runMyWayApp.removeStartPoint()" class="marker-btn danger">
                        <i class="fas fa-trash"></i> Supprimer
                    </button>
                </div>
            </div>
        `);

        this.startPoint = latlng;
        
        // Mettre √† jour le champ d'adresse
        this.updateAddressField(latlng, 'startAddress');
        
        // Mettre √† jour le feedback
        this.updateRouteInfo();
        
        // Afficher le bouton de suppression
        this.toggleClearButton('clearStartBtn', true);
        
        console.log('‚úÖ Point de d√©part d√©fini:', latlng);
    }

    setEndPoint(latlng) {
        // Supprimer le marqueur d'arriv√©e existant
        if (this.endMarker) {
            this.map.removeLayer(this.endMarker);
        }

        // Cr√©er le nouveau marqueur d'arriv√©e avec popup interactive et drag & drop
        this.endMarker = L.marker(latlng, {
            icon: L.divIcon({
                html: '<div class="custom-marker-end"><i class="fas fa-flag-checkered"></i></div>',
                className: 'custom-marker-container',
                iconSize: [24, 24],
                iconAnchor: [12, 12]
            }),
            draggable: true
        }).addTo(this.map);

        // Events pour le marqueur d'arriv√©e
        this.endMarker.on('dragstart', () => {
            console.log('ü§è D√©placement du point d\'arriv√©e...');
        });

        this.endMarker.on('dragend', (e) => {
            const newPos = e.target.getLatLng();
            this.endPoint = newPos;
            this.updateAddressField(newPos, 'endAddress');
            console.log('üèÅ Point d\'arriv√©e d√©plac√©:', newPos);
        });

        this.endMarker.on('contextmenu', (e) => {
            e.originalEvent.preventDefault();
            this.removeEndPoint();
        });

        // Ajouter popup interactive
        this.endMarker.bindPopup(`
            <div class="marker-popup">
                <strong><i class="fas fa-flag-checkered"></i> Point d'arriv√©e</strong>
                <div class="popup-tips">
                    <small>üí° Glissez pour d√©placer<br>üñ±Ô∏è Clic droit pour supprimer</small>
                </div>
                <div class="marker-actions">
                    <button onclick="window.runMyWayApp.removeEndPoint()" class="marker-btn danger">
                        <i class="fas fa-trash"></i> Supprimer
                    </button>
                </div>
            </div>
        `);

        this.endPoint = latlng;
        
        // Mettre √† jour le champ d'adresse
        this.updateAddressField(latlng, 'endAddress');
        
        // Mettre √† jour le feedback
        this.updateRouteInfo();
        
        // Afficher le bouton de suppression
        this.toggleClearButton('clearEndBtn', true);
        
        console.log('‚úÖ Point d\'arriv√©e d√©fini:', latlng);
    }

    /**
     * Supprime le point de d√©part
     */
    removeStartPoint() {
        if (this.startMarker) {
            this.map.removeLayer(this.startMarker);
            this.startMarker = null;
        }
        this.startPoint = null;
        
        // Vider le champ
        const startAddressField = document.getElementById('startAddress');
        if (startAddressField) {
            startAddressField.value = '';
        }
        
        // Mettre √† jour le feedback
        this.updateRouteInfo();
        
        // Masquer le bouton de suppression
        this.toggleClearButton('clearStartBtn', false);
        
        console.log('üóëÔ∏è Point de d√©part supprim√©');
    }

    /**
     * Supprime le point d'arriv√©e
     */
    removeEndPoint() {
        if (this.endMarker) {
            this.map.removeLayer(this.endMarker);
            this.endMarker = null;
        }
        this.endPoint = null;
        
        // Vider le champ
        const endAddressField = document.getElementById('endAddress');
        if (endAddressField) {
            endAddressField.value = '';
        }
        
        // Mettre √† jour le feedback
        this.updateRouteInfo();
        
        // Masquer le bouton de suppression
        this.toggleClearButton('clearEndBtn', false);
        
        console.log('üóëÔ∏è Point d\'arriv√©e supprim√©');
    }

    /**
     * Affiche/masque un bouton de suppression
     */
    toggleClearButton(buttonId, show) {
        const button = document.getElementById(buttonId);
        if (button) {
            button.style.display = show ? 'flex' : 'none';
        }
    }


    /**
     * Met √† jour un champ d'adresse via g√©ocodage inverse
     */
    async updateAddressField(latlng, fieldId) {
        try {
            const url = `https://nominatim.openstreetmap.org/reverse?` +
                `format=json&` +
                `lat=${latlng.lat}&` +
                `lon=${latlng.lng}&` +
                `zoom=18&` +
                `addressdetails=1`;
            
            const response = await fetch(url, {
                headers: {
                    'Accept-Language': 'fr',
                    'User-Agent': 'RunMyWay/1.0'
                },
                signal: AbortSignal.timeout(3000)
            });
            
            if (response.ok) {
                const data = await response.json();
                const field = document.getElementById(fieldId);
                if (field && data.display_name) {
                    field.value = this.formatAddressName(data.display_name);
                }
            }
        } catch (error) {
            // Erreur CORS ou r√©seau - afficher les coordonn√©es silencieusement
            const field = document.getElementById(fieldId);
            if (field) {
                field.value = `${latlng.lat.toFixed(4)}, ${latlng.lng.toFixed(4)}`;
            }
        }
    }

    /**
     * Met √† jour les informations de statut du parcours
     */
    updateRouteInfo() {
        const routeInfoText = document.getElementById('routeInfoText');
        if (!routeInfoText) return;

        const returnToStart = document.getElementById('returnToStart')?.checked;
        
        if (!this.startPoint) {
            routeInfoText.innerHTML = '<small>üéØ Cliquez sur la carte pour placer le point de d√©part</small>';
            routeInfoText.style.color = 'var(--text-secondary)';
        } else if (returnToStart) {
            routeInfoText.innerHTML = '<small>‚úÖ D√©part d√©fini - Parcours en boucle</small>';
            routeInfoText.style.color = 'var(--success-color)';
        } else if (!this.endPoint) {
            routeInfoText.innerHTML = '<small>üéØ Cliquez sur la carte pour placer l\'arriv√©e</small>';
            routeInfoText.style.color = 'var(--primary-color)';
        } else {
            routeInfoText.innerHTML = '<small>‚úÖ D√©part et arriv√©e d√©finis - Parcours A‚ÜíB</small>';
            routeInfoText.style.color = 'var(--success-color)';
        }
    }

    /**
     * G√®re le changement du toggle "Retour au d√©part"
     */
    handleReturnToStartToggle(isChecked) {
        const endAddressGroup = document.querySelector('#endAddress').closest('.route-input-group');
        
        if (isChecked) {
            // Masquer le champ d'arriv√©e et supprimer le marqueur
            if (endAddressGroup) {
                endAddressGroup.style.opacity = '0.5';
                endAddressGroup.style.pointerEvents = 'none';
            }
            
            if (this.endMarker) {
                this.map.removeLayer(this.endMarker);
                this.endMarker = null;
            }
            this.endPoint = null;
            
            // Vider le champ
            const endAddressField = document.getElementById('endAddress');
            if (endAddressField) {
                endAddressField.value = '';
                endAddressField.placeholder = 'Retour au d√©part activ√©';
            }
        } else {
            // R√©activer le champ d'arriv√©e
            if (endAddressGroup) {
                endAddressGroup.style.opacity = '1';
                endAddressGroup.style.pointerEvents = 'auto';
            }
            
            const endAddressField = document.getElementById('endAddress');
            if (endAddressField) {
                endAddressField.placeholder = 'Point d\'arriv√©e (optionnel)';
            }
        }
        
        // Mettre √† jour le feedback
        this.updateRouteInfo();
    }

    async generateRoute() {
        console.log('üõ£Ô∏è G√©n√©ration du parcours...');
        
        if (!this.startPoint) {
            this.showError('Veuillez d√©finir un point de d√©part en cliquant sur la carte');
            return;
        }

        try {
            this.showLoading();
            
            // Obtenir les param√®tres
            const distanceSlider = document.getElementById('targetDistance');
            const distance = parseFloat(distanceSlider?.value || 3);
            const mode = document.querySelector('input[name="travelMode"]:checked')?.value || 'walking';
            const returnToStart = document.getElementById('returnToStart')?.checked;
            
            // Validation des param√®tres selon le mode
            const maxDistances = { walking: 15, running: 30, cycling: 80 };
            const maxAllowed = maxDistances[mode] || 15;
            
            if (distance > maxAllowed) {
                this.showError(`Distance trop √©lev√©e pour ${mode}: maximum ${maxAllowed}km recommand√©`);
                this.hideLoading();
                return;
            }

            console.log(`üéØ Param√®tres de g√©n√©ration:`);
            console.log(`  - Distance cible: ${distance}km (slider value: ${distanceSlider?.value})`);
            console.log(`  - Mode: ${mode} (max recommand√©: ${maxAllowed}km)`);
            console.log(`  - Retour au d√©part: ${returnToStart}`);
            console.log(`  - Point d'arriv√©e d√©fini: ${this.endPoint ? 'Oui' : 'Non'}`);
            
            // G√©n√©rer un parcours am√©lior√©
            const route = await this.createSmartRoute(this.startPoint, distance, mode, returnToStart);
            
            if (route && route.length > 0) {
                this.displayRoute(route, distance, mode);
                this.hideLoading();
                this.showResults(route, distance, mode);
                console.log('‚úÖ Parcours g√©n√©r√© avec succ√®s');
            } else {
                throw new Error('Impossible de g√©n√©rer un parcours pour cette zone');
            }
            
        } catch (error) {
            this.hideLoading();
            this.showError(error.message || 'Erreur lors de la g√©n√©ration du parcours');
            console.error('‚ùå Erreur g√©n√©ration:', error);
        }
    }

    /**
     * G√©n√®re un parcours intelligent bas√© sur la distance et le mode
     */
    async createSmartRoute(startPoint, targetDistance, mode, returnToStart) {
        console.log(`G√©n√©ration d'un parcours de ${targetDistance}km en mode ${mode}`);
        
        try {
            // Conversion du mode pour l'API OSRM
            const osrmMode = this.getOSRMMode(mode);
            
            if (returnToStart) {
                // G√©n√©rer un parcours en boucle
                return await this.generateLoopRoute(startPoint, targetDistance, osrmMode);
            } else if (this.endPoint) {
                // Calcul de la distance directe
                const directDistance = this.calculateDirectDistance(startPoint, this.endPoint);
                console.log(`Distance directe A‚ÜíB: ${directDistance.toFixed(1)}km vs cible: ${targetDistance}km`);
                
                // Toujours utiliser l'algorithme sp√©cialis√© pour les parcours A‚ÜíB
                console.log('Parcours A‚ÜíB avec distance cible, algorithme sp√©cialis√©');
                return await this.generateLongDistanceRoute(startPoint, this.endPoint, targetDistance, osrmMode);
            } else {
                // G√©n√©rer un parcours en boucle par d√©faut
                return await this.generateLoopRoute(startPoint, targetDistance, osrmMode);
            }
        } catch (error) {
            console.error('Erreur g√©n√©ration parcours:', error);
            // Fallback vers l'ancienne m√©thode en cas d'erreur API
            return this.generateFallbackRoute(startPoint, targetDistance, returnToStart);
        }
    }

    /**
     * Convertit le mode de transport pour l'API OSRM
     */
    getOSRMMode(mode) {
        const modeMap = {
            'walking': 'foot',
            'running': 'foot', 
            'cycling': 'bike'
        };
        return modeMap[mode] || 'foot';
    }

    /**
     * G√©n√®re un parcours en boucle utilisant l'API OSRM
     */
    async generateLoopRoute(startPoint, targetDistance, mode) {
        console.log(`G√©n√©ration d'un parcours en boucle de ${targetDistance}km`);
        
        // Essayer diff√©rentes configurations pour s'approcher de la distance cible
        let bestRoute = null;
        let bestDistance = 0;
        let bestDeviation = Infinity;
        
        // Plus de tentatives pour les longues distances (v√©lo notamment)
        const maxAttempts = targetDistance > 20 ? 5 : 3;
        
        // Tol√©rance tr√®s stricte pour les courtes distances
        let tolerance = 0.15; // 15% par d√©faut
        if (mode === 'bike' && targetDistance > 30) {
            tolerance = 0.25; // Plus permissif pour v√©lo longue distance
        } else if (targetDistance <= 8) {
            tolerance = 0.08; // Tr√®s strict pour tr√®s courtes distances (8%)
        } else if (targetDistance <= 12) {
            tolerance = 0.10; // Strict pour courtes distances (10%)
        } else if (targetDistance <= 20) {
            tolerance = 0.12; // Plus strict pour distances moyennes (12%)
        }
        
        for (let attempt = 1; attempt <= maxAttempts; attempt++) {
            try {
                console.log(`Tentative ${attempt}/${maxAttempts} (tol√©rance: ${(tolerance*100).toFixed(0)}%)`);
                
                // Ajuster le rayon selon les tentatives pr√©c√©dentes de mani√®re plus agressive
                let radiusFactor = 1.0;
                if (attempt === 2 && bestDistance > 0) {
                    radiusFactor = Math.max(0.5, Math.min(2.0, targetDistance / bestDistance));
                }
                if (attempt === 3 && bestDistance > 0) {
                    radiusFactor = Math.max(0.4, Math.min(2.5, (targetDistance / bestDistance) * 1.1));
                }
                if (attempt === 4 && bestDistance > 0) {
                    radiusFactor = Math.max(0.3, Math.min(3.0, (targetDistance / bestDistance) * 1.3));
                }
                if (attempt === 5 && bestDistance > 0) {
                    radiusFactor = Math.max(0.2, Math.min(4.0, (targetDistance / bestDistance) * 1.5));
                }
                
                // G√©n√©rer des points de passage strat√©giques
                const waypoints = await this.generateWaypoints(startPoint, targetDistance, mode, radiusFactor);
                
                if (waypoints.length < 2) {
                    console.warn(`Tentative ${attempt}: Pas assez de points de passage`);
                    continue;
                }
                
                // Cr√©er une boucle en passant par tous les waypoints
                const allPoints = [startPoint, ...waypoints, startPoint];
                
                // Calculer l'itin√©raire complet via OSRM
                const route = await this.calculateOSRMRoute(allPoints, mode);
                const distance = this.lastRouteDistance || this.calculateRouteDistance(route);
                const deviation = Math.abs(distance - targetDistance);
                
                console.log(`Tentative ${attempt}: ${distance.toFixed(1)}km (cible: ${targetDistance}km, √©cart: ${deviation.toFixed(1)}km, facteur: ${radiusFactor.toFixed(2)})`);
                
                // Garder le meilleur r√©sultat
                if (deviation < bestDeviation || bestRoute === null) {
                    bestRoute = route;
                    bestDistance = distance;
                    bestDeviation = deviation;
                }
                
                // Si on est assez proche, on s'arr√™te
                if (deviation < targetDistance * tolerance) {
                    console.log(`‚úÖ Distance acceptable trouv√©e: ${distance.toFixed(1)}km`);
                    break;
                }
                
            } catch (error) {
                console.warn(`Erreur tentative ${attempt}:`, error);
            }
        }
        
        if (!bestRoute) {
            throw new Error('Impossible de g√©n√©rer un parcours valide');
        }
        
        console.log(`üèÜ Meilleur parcours: ${bestDistance.toFixed(1)}km (√©cart: ${bestDeviation.toFixed(1)}km)`);
        return bestRoute;
    }

    /**
     * G√©n√®re une boucle qui passe par le point d'arriv√©e
     */
    async generateLoopRouteThroughEndPoint(startPoint, endPoint, targetDistance, mode) {
        console.log(`G√©n√©ration d'une boucle de ${targetDistance}km passant par le point d'arriv√©e`);
        
        // Utiliser le point milieu entre d√©part et arriv√©e comme centre
        const centerLat = (startPoint.lat + endPoint.lat) / 2;
        const centerLng = (startPoint.lng + endPoint.lng) / 2;
        const center = L.latLng(centerLat, centerLng);
        
        let bestRoute = null;
        let bestDistance = 0;
        let bestDeviation = Infinity;
        
        const maxAttempts = targetDistance > 20 ? 5 : 3;
        
        for (let attempt = 1; attempt <= maxAttempts; attempt++) {
            try {
                console.log(`Tentative boucle ${attempt}/${maxAttempts}`);
                
                // G√©n√©rer des points de passage autour du centre
                let radiusFactor = 1.0;
                if (attempt === 2 && bestDistance > 0) {
                    radiusFactor = Math.max(0.5, Math.min(2.0, targetDistance / bestDistance));
                }
                if (attempt >= 3 && bestDistance > 0) {
                    radiusFactor = Math.max(0.3, Math.min(3.0, (targetDistance / bestDistance) * (0.8 + attempt * 0.2)));
                }
                
                const waypoints = await this.generateWaypoints(center, targetDistance, mode, radiusFactor);
                
                if (waypoints.length < 2) {
                    console.warn(`Tentative ${attempt}: Pas assez de points de passage`);
                    continue;
                }
                
                // Cr√©er un parcours : d√©part ‚Üí waypoints ‚Üí arriv√©e ‚Üí retour au d√©part
                const allPoints = [startPoint, ...waypoints, endPoint, startPoint];
                
                // Calculer l'itin√©raire
                const route = await this.calculateOSRMRoute(allPoints, mode);
                const distance = this.lastRouteDistance || this.calculateRouteDistance(route);
                const deviation = Math.abs(distance - targetDistance);
                
                console.log(`Tentative boucle ${attempt}: ${distance.toFixed(1)}km (cible: ${targetDistance}km, √©cart: ${deviation.toFixed(1)}km)`);
                
                if (deviation < bestDeviation || bestRoute === null) {
                    bestRoute = route;
                    bestDistance = distance;
                    bestDeviation = deviation;
                }
                
                // Tol√©rance adaptative
                let tolerance = 0.20; // 20% par d√©faut pour boucles complexes
                if (targetDistance >= 50) tolerance = 0.30;
                
                if (deviation < targetDistance * tolerance) {
                    console.log(`‚úÖ Boucle acceptable trouv√©e: ${distance.toFixed(1)}km`);
                    break;
                }
                
            } catch (error) {
                console.warn(`Erreur tentative boucle ${attempt}:`, error);
            }
        }
        
        if (!bestRoute) {
            console.warn('√âchec g√©n√©ration boucle, fallback vers parcours simple');
            return await this.generatePointToPointRouteWithDistance(startPoint, endPoint, targetDistance, mode);
        }
        
        console.log(`üèÜ Meilleure boucle: ${bestDistance.toFixed(1)}km (√©cart: ${bestDeviation.toFixed(1)}km)`);
        return bestRoute;
    }

    /**
     * Calcule la distance directe entre deux points (√† vol d'oiseau)
     */
    calculateDirectDistance(point1, point2) {
        const R = 6371; // Rayon de la Terre en km
        const dLat = (point2.lat - point1.lat) * Math.PI / 180;
        const dLng = (point2.lng - point1.lng) * Math.PI / 180;
        const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                  Math.cos(point1.lat * Math.PI / 180) * Math.cos(point2.lat * Math.PI / 180) *
                  Math.sin(dLng/2) * Math.sin(dLng/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        return R * c;
    }

    /**
     * G√©n√®re un parcours pour les tr√®s longues distances (‚â•40km)
     */
    async generateLongDistanceRoute(startPoint, endPoint, targetDistance, mode) {
        console.log(`G√©n√©ration longue distance: ${targetDistance}km`);
        
        const directDistance = this.calculateDirectDistance(startPoint, endPoint);
        const remainingDistance = targetDistance - directDistance;
        
        // Strat√©gie adaptative selon la distance - beaucoup plus conservatrice pour courtes distances
        let segments;
        if (targetDistance >= 60) {
            segments = Math.max(6, Math.min(8, Math.floor(targetDistance / 12))); // 1 segment par 12km
        } else if (targetDistance >= 30) {
            segments = Math.max(3, Math.min(5, Math.floor(targetDistance / 8))); // 1 segment par 8km
        } else if (targetDistance >= 15) {
            segments = Math.max(2, Math.min(3, Math.floor(targetDistance / 6))); // 1 segment par 6km pour distances moyennes
        } else if (targetDistance >= 8) {
            segments = Math.max(1, Math.min(2, Math.floor(targetDistance / 5))); // 1 segment par 5km pour courtes distances
        } else {
            segments = 1; // Un seul segment pour tr√®s courtes distances
        }
        const segmentLength = remainingDistance / segments;
        
        console.log(`Strat√©gie: ${segments} segments de ~${segmentLength.toFixed(1)}km chacun`);
        
        let allPoints = [startPoint];
        let currentPoint = startPoint;
        
        // G√©n√©rer des segments entre d√©part et arriv√©e
        for (let i = 0; i < segments; i++) {
            console.log(`G√©n√©ration segment ${i + 1}/${segments}`);
            
            // Position interpol√©e vers l'arriv√©e
            const progress = (i + 1) / (segments + 1);
            const targetLat = startPoint.lat + (endPoint.lat - startPoint.lat) * progress;
            const targetLng = startPoint.lng + (endPoint.lng - startPoint.lng) * progress;
            const targetPoint = L.latLng(targetLat, targetLng);
            
            // Cr√©er un d√©tour beaucoup plus conservateur selon la distance cible
            let maxDetourRadius;
            if (targetDistance >= 60) {
                maxDetourRadius = 12; // Tr√®s longues distances
            } else if (targetDistance >= 30) {
                maxDetourRadius = 6;  // Longues distances  
            } else if (targetDistance >= 15) {
                maxDetourRadius = 2;  // Distances moyennes
            } else if (targetDistance >= 10) {
                maxDetourRadius = 1;  // Courtes distances
            } else if (targetDistance >= 8) {
                maxDetourRadius = 0.5; // Tr√®s courtes distances
            } else {
                maxDetourRadius = 0.3; // Ultra courtes distances
            }
            
            const detourRadius = Math.min(segmentLength / 3, maxDetourRadius); // Diviser par 3 au lieu de 2 pour plus de conservatisme
            const angle = (i * 120 + Math.random() * 60) * Math.PI / 180; // R√©partir les d√©tours
            
            const detourLat = targetPoint.lat + Math.cos(angle) * (detourRadius / 111);
            const detourLng = targetPoint.lng + Math.sin(angle) * (detourRadius / 111);
            const detourPoint = L.latLng(detourLat, detourLng);
            
            // Trouver un point routier pour le d√©tour
            const snapPoint = await this.snapToRoad(detourPoint, mode);
            if (snapPoint) {
                allPoints.push(snapPoint);
                currentPoint = snapPoint;
                console.log(`Segment ${i + 1}: d√©tour de ${detourRadius.toFixed(1)}km ajout√©`);
            }
            
            await new Promise(resolve => setTimeout(resolve, 150)); // D√©lai API
        }
        
        // Ajouter le point d'arriv√©e
        allPoints.push(endPoint);
        
        // Calculer le parcours final
        console.log(`Calcul du parcours final avec ${allPoints.length} points`);
        const route = await this.calculateOSRMRoute(allPoints, mode);
        const finalDistance = this.lastRouteDistance || this.calculateRouteDistance(route);
        
        console.log(`Parcours longue distance g√©n√©r√©: ${finalDistance.toFixed(1)}km (cible: ${targetDistance}km)`);
        
        // Seuil adaptatif beaucoup plus strict pour les courtes distances
        let threshold = 0.85; // 85% par d√©faut
        if (targetDistance <= 8) {
            threshold = 0.90; // Tr√®s strict pour tr√®s courtes distances
        } else if (targetDistance <= 12) {
            threshold = 0.85; // Strict pour courtes distances
        } else if (targetDistance <= 20) {
            threshold = 0.80; // Moyennement strict
        }
        
        // Si c'est encore trop court, ajouter des d√©tours suppl√©mentaires
        if (finalDistance < targetDistance * threshold) {
            console.log(`Distance insuffisante (${finalDistance.toFixed(1)}km < ${(targetDistance * threshold).toFixed(1)}km), ajout de d√©tours suppl√©mentaires...`);
            return await this.addExtraDetours(allPoints, targetDistance, finalDistance, mode);
        }
        
        return route;
    }

    /**
     * Ajoute des d√©tours suppl√©mentaires si le parcours est trop court
     */
    async addExtraDetours(basePoints, targetDistance, currentDistance, mode) {
        const missingDistance = targetDistance - currentDistance;
        
        // Pour les courtes distances, √™tre beaucoup plus conservateur
        let detoursNeeded;
        if (targetDistance <= 10) {
            detoursNeeded = Math.min(1, Math.ceil(missingDistance / 2)); // Maximum 1 d√©tour, 1 par 2km manquants
        } else if (targetDistance <= 20) {
            detoursNeeded = Math.min(2, Math.ceil(missingDistance / 5)); // Maximum 2 d√©tours, 1 par 5km manquants
        } else {
            detoursNeeded = Math.ceil(missingDistance / 10); // 1 d√©tour par 10km manquants pour longues distances
        }
        
        console.log(`Ajout de ${detoursNeeded} d√©tours pour combler ${missingDistance.toFixed(1)}km`);
        
        const enhancedPoints = [...basePoints];
        
        // Ins√©rer des d√©tours entre les points existants
        for (let i = 0; i < detoursNeeded && i < basePoints.length - 1; i++) {
            const point1 = basePoints[i];
            const point2 = basePoints[i + 1];
            
            // Point milieu
            const midLat = (point1.lat + point2.lat) / 2;
            const midLng = (point1.lng + point2.lng) / 2;
            
            // D√©tour perpendiculaire tr√®s conservateur pour courtes distances
            let maxExtraDetour;
            if (targetDistance >= 60) {
                maxExtraDetour = 10;
            } else if (targetDistance >= 30) {
                maxExtraDetour = 6;
            } else if (targetDistance >= 15) {
                maxExtraDetour = 2;
            } else if (targetDistance >= 10) {
                maxExtraDetour = 1;
            } else {
                maxExtraDetour = 0.5; // Tr√®s petit d√©tour pour courtes distances
            }
            
            const detourRadius = Math.min(missingDistance / detoursNeeded / 3, maxExtraDetour); // Diviser par 3 au lieu de 2
            const angle = Math.random() * 2 * Math.PI;
            
            const detourLat = midLat + Math.cos(angle) * (detourRadius / 111);
            const detourLng = midLng + Math.sin(angle) * (detourRadius / 111);
            const detourPoint = L.latLng(detourLat, detourLng);
            
            const snapPoint = await this.snapToRoad(detourPoint, mode);
            if (snapPoint) {
                enhancedPoints.splice(i * 2 + 1, 0, snapPoint);
                console.log(`D√©tour suppl√©mentaire ${i + 1}: ${detourRadius.toFixed(1)}km`);
            }
            
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        const finalRoute = await this.calculateOSRMRoute(enhancedPoints, mode);
        const finalDistance = this.lastRouteDistance || this.calculateRouteDistance(finalRoute);
        
        console.log(`Parcours final avec d√©tours: ${finalDistance.toFixed(1)}km`);
        return finalRoute;
    }

    /**
     * G√©n√®re des points de passage intelligents autour du point de d√©part
     */
    async generateWaypoints(center, targetDistance, mode, radiusFactor = 1.0) {
        const waypoints = [];
        
        // Ajustement selon le mode de transport
        let baseRadius, numWaypoints, maxRadius;
        
        if (mode === 'bike') {
            // V√©lo : ajustement plus conservateur
            baseRadius = Math.min(targetDistance / 6, 15); // Maximum 15km de rayon
            numWaypoints = Math.min(6, Math.max(3, Math.floor(targetDistance / 12)));
            maxRadius = Math.min(targetDistance / 4, 20); // Rayon max = 20km
        } else if (mode === 'foot' && targetDistance > 10) {
            // Course longue distance
            baseRadius = Math.min(targetDistance / 5, 8);
            numWaypoints = Math.min(6, Math.max(3, Math.floor(targetDistance / 3)));
            maxRadius = Math.min(targetDistance / 3, 12);
        } else {
            // Marche/course courte
            baseRadius = targetDistance / 5;
            numWaypoints = Math.min(5, Math.max(3, Math.floor(targetDistance / 2)));
            maxRadius = targetDistance / 3;
        }
        
        const radiusKm = Math.min(baseRadius * radiusFactor, maxRadius);
        
        console.log(`Mode ${mode}: Recherche de ${numWaypoints} points de passage dans un rayon de ${radiusKm.toFixed(1)}km (distance cible: ${targetDistance}km)`);
        
        // G√©n√©rer tous les points candidats d'abord
        const candidatePoints = [];
        for (let i = 0; i < numWaypoints; i++) {
            const angle = (i / numWaypoints) * 2 * Math.PI;
            
            // Variation du rayon plus importante pour les longues distances
            const variationRange = targetDistance > 20 ? 1.0 : 0.8;
            const variation = 0.6 + (Math.random() * variationRange);
            const currentRadius = (radiusKm * variation) / 111; // Conversion en degr√©s
            
            // Variation angulaire proportionnelle √† la distance
            const angleVariationRange = Math.min(0.7, targetDistance / 50);
            const angleVariation = (Math.random() - 0.5) * angleVariationRange;
            const finalAngle = angle + angleVariation;
            
            const lat = center.lat + Math.cos(finalAngle) * currentRadius;
            const lng = center.lng + Math.sin(finalAngle) * currentRadius;
            
            candidatePoints.push(L.latLng(lat, lng));
        }
        
        // Traitement en parall√®le avec limitation
        const batchSize = 3; // Traiter par batch de 3 pour √©viter surcharge API
        for (let i = 0; i < candidatePoints.length; i += batchSize) {
            const batch = candidatePoints.slice(i, i + batchSize);
            const snapPromises = batch.map(point => this.snapToRoad(point, mode));
            
            const snapResults = await Promise.all(snapPromises);
            waypoints.push(...snapResults.filter(point => point !== null));
            
            // Petit d√©lai entre les batchs
            if (i + batchSize < candidatePoints.length) {
                await new Promise(resolve => setTimeout(resolve, 50));
            }
        }
        
        console.log(`‚úÖ ${waypoints.length} points de passage trouv√©s`);
        return waypoints;
    }

    /**
     * Trouve le point routier le plus proche avec cache
     */
    async snapToRoad(point, mode) {
        // Cl√© de cache bas√©e sur position arrondie (pr√©cision 100m)
        const lat = Math.round(point.lat * 1000) / 1000;
        const lng = Math.round(point.lng * 1000) / 1000;
        const cacheKey = `${mode}_${lat}_${lng}`;
        
        // V√©rifier le cache
        if (this.snapCache.has(cacheKey)) {
            return this.snapCache.get(cacheKey);
        }
        
        try {
            const url = `https://router.project-osrm.org/nearest/v1/${mode}/${point.lng},${point.lat}?number=1`;
            
            const response = await fetch(url);
            const data = await response.json();
            
            let result = point; // Point original par d√©faut
            if (data.code === 'Ok' && data.waypoints && data.waypoints.length > 0) {
                const wp = data.waypoints[0];
                result = L.latLng(wp.location[1], wp.location[0]);
            }
            
            // Mettre en cache
            this.snapCache.set(cacheKey, result);
            return result;
            
        } catch (error) {
            console.warn('Erreur snap to road:', error);
            return point; // Retourner le point original en cas d'erreur
        }
    }

    /**
     * Calcule un itin√©raire via l'API OSRM
     */
    async calculateOSRMRoute(points, mode) {
        if (points.length < 2) {
            throw new Error('Au moins 2 points requis pour calculer un itin√©raire');
        }
        
        // Construire l'URL OSRM
        const coordinates = points.map(p => `${p.lng},${p.lat}`).join(';');
        const url = `https://router.project-osrm.org/route/v1/${mode}/${coordinates}?overview=full&geometries=geojson`;
        
        console.log(`Appel OSRM: ${url}`);
        
        const response = await fetch(url);
        const data = await response.json();
        
        if (data.code !== 'Ok' || !data.routes || data.routes.length === 0) {
            throw new Error('Aucun itin√©raire trouv√©');
        }
        
        const route = data.routes[0];
        const geometry = route.geometry;
        
        // Convertir les coordonn√©es en LatLng pour Leaflet
        const routePoints = geometry.coordinates.map(coord => 
            L.latLng(coord[1], coord[0])
        );
        
        // Stocker la distance r√©elle de l'API
        this.lastRouteDistance = route.distance / 1000; // Conversion en km
        
        console.log(`‚úÖ Itin√©raire calcul√©: ${routePoints.length} points, ${this.lastRouteDistance.toFixed(1)}km`);
        
        return routePoints;
    }

    /**
     * G√©n√®re un parcours point √† point
     */
    async generatePointToPointRoute(start, end, mode) {
        console.log('G√©n√©ration d\'un parcours point √† point');
        
        const route = await this.calculateOSRMRoute([start, end], mode);
        return route;
    }

    /**
     * G√©n√®re un parcours point √† point en tenant compte de la distance cible
     */
    async generatePointToPointRouteWithDistance(start, end, targetDistance, mode) {
        console.log(`G√©n√©ration d'un parcours A‚ÜíB de ${targetDistance}km`);
        
        try {
            // Calculer la distance directe
            const directRoute = await this.calculateOSRMRoute([start, end], mode);
            const directDistance = this.lastRouteDistance;
            
            console.log(`Distance directe: ${directDistance?.toFixed(1)}km, cible: ${targetDistance}km`);
            
            // Si la distance directe est proche de la cible (¬±20%), l'utiliser
            if (directDistance && Math.abs(directDistance - targetDistance) <= targetDistance * 0.2) {
                console.log('‚úÖ Distance directe acceptable');
                return directRoute;
            }
            
            // Sinon, g√©n√©rer un parcours avec des d√©tours
            if (directDistance && directDistance < targetDistance) {
                console.log('üîÑ Ajout de d√©tours pour atteindre la distance cible');
                return await this.generateRouteWithDetours(start, end, targetDistance, mode);
            } else {
                console.log('‚ÑπÔ∏è Distance directe sup√©rieure √† la cible, utilisation du trajet direct');
                return directRoute;
            }
            
        } catch (error) {
            console.error('Erreur parcours A‚ÜíB:', error);
            // Fallback vers le parcours direct
            return await this.calculateOSRMRoute([start, end], mode);
        }
    }

    /**
     * G√©n√®re un parcours avec d√©tours pour atteindre la distance cible
     */
    async generateRouteWithDetours(start, end, targetDistance, mode) {
        console.log('G√©n√©ration de d√©tours...');
        
        const maxAttempts = 3;
        let bestRoute = null;
        let bestDistance = 0;
        let bestDeviation = Infinity;
        
        for (let attempt = 1; attempt <= maxAttempts; attempt++) {
            try {
                // Calculer le point milieu
                const midLat = (start.lat + end.lat) / 2;
                const midLng = (start.lng + end.lng) / 2;
                const midPoint = L.latLng(midLat, midLng);
                
                // G√©n√©rer des points de passage pour allonger le trajet
                const detoursNeeded = Math.max(3, Math.floor(targetDistance / 15)); // Plus de points pour longues distances
                const waypoints = await this.generateDetourWaypoints(midPoint, detoursNeeded, attempt, targetDistance, mode);
                
                if (waypoints.length > 0) {
                    // Cr√©er le parcours avec d√©tours
                    const routePoints = [start, ...waypoints, end];
                    const route = await this.calculateOSRMRoute(routePoints, mode);
                    const distance = this.lastRouteDistance;
                    const deviation = Math.abs(distance - targetDistance);
                    
                    console.log(`Tentative ${attempt}: ${distance?.toFixed(1)}km (√©cart: ${deviation?.toFixed(1)}km)`);
                    
                    if (distance && (deviation < bestDeviation || bestRoute === null)) {
                        bestRoute = route;
                        bestDistance = distance;
                        bestDeviation = deviation;
                    }
                    
                    // Tol√©rance adaptative selon la distance
                    let tolerance = 0.15; // 15% par d√©faut
                    if (targetDistance >= 50) tolerance = 0.25; // 25% pour tr√®s longues distances
                    else if (targetDistance >= 20) tolerance = 0.20; // 20% pour longues distances
                    
                    // Si c'est assez proche, on s'arr√™te
                    if (deviation <= targetDistance * tolerance) {
                        console.log(`‚úÖ Distance acceptable avec d√©tours (${(tolerance*100).toFixed(0)}% tol√©rance)`);
                        break;
                    }
                }
                
            } catch (error) {
                console.warn(`Erreur tentative d√©tour ${attempt}:`, error);
            }
        }
        
        return bestRoute || await this.calculateOSRMRoute([start, end], mode);
    }

    /**
     * G√©n√®re des points de passage pour cr√©er des d√©tours
     */
    async generateDetourWaypoints(centerPoint, count, attempt, targetDistance, mode) {
        const waypoints = [];
        
        // Calculer un rayon appropri√© selon la distance cible
        let baseRadius;
        if (targetDistance >= 50) {
            baseRadius = targetDistance / 4; // 20km de rayon pour 80km de cible
        } else if (targetDistance >= 20) {
            baseRadius = targetDistance / 5; // 4km de rayon pour 20km de cible
        } else {
            baseRadius = targetDistance / 6; // Plus conservateur pour courtes distances
        }
        
        const radiusKm = baseRadius + (attempt * baseRadius * 0.3); // Augmentation progressive
        const maxWaypoints = Math.min(6, Math.max(3, Math.floor(targetDistance / 10)));
        
        console.log(`G√©n√©ration d√©tours tentative ${attempt}: rayon ${radiusKm.toFixed(1)}km, ${maxWaypoints} points max`);
        
        for (let i = 0; i < Math.min(count, maxWaypoints); i++) {
            const angle = (i / maxWaypoints) * 2 * Math.PI + (attempt * 0.7); // D√©calage par tentative
            const variation = 0.7 + (Math.random() * 0.6); // Variation du rayon
            const currentRadius = (radiusKm * variation) / 111; // Conversion en degr√©s
            
            const lat = centerPoint.lat + Math.cos(angle) * currentRadius;
            const lng = centerPoint.lng + Math.sin(angle) * currentRadius;
            
            const waypoint = await this.snapToRoad(L.latLng(lat, lng), mode);
            if (waypoint) {
                waypoints.push(waypoint);
                await new Promise(resolve => setTimeout(resolve, 100)); // D√©lai API
            }
        }
        
        console.log(`D√©tours g√©n√©r√©s: ${waypoints.length} points dans un rayon de ${radiusKm.toFixed(1)}km`);
        return waypoints;
    }

    /**
     * M√©thode de fallback en cas d'erreur API
     */
    generateFallbackRoute(startPoint, targetDistance, returnToStart) {
        console.log('üîÑ Utilisation du mode fallback');
        
        const route = [];
        const radiusKm = targetDistance / (2 * Math.PI);
        const radiusDeg = radiusKm / 111;
        const points = 8;
        
        for (let i = 0; i <= points; i++) {
            const angle = (i / points) * 2 * Math.PI;
            const lat = startPoint.lat + Math.cos(angle) * radiusDeg * 0.8;
            const lng = startPoint.lng + Math.sin(angle) * radiusDeg * 0.8;
            route.push(L.latLng(lat, lng));
        }
        
        if (returnToStart) {
            route.push(startPoint);
        }
        
        return route;
    }

    /**
     * Calcule la distance totale d'un parcours
     */
    calculateRouteDistance(route) {
        if (!route || route.length < 2) return 0;
        
        let totalDistance = 0;
        for (let i = 1; i < route.length; i++) {
            totalDistance += route[i-1].distanceTo(route[i]);
        }
        
        return totalDistance / 1000; // Conversion en kilom√®tres
    }

    /**
     * Affiche le parcours sur la carte
     */
    displayRoute(route, targetDistance, mode) {
        // Supprimer l'ancien parcours
        if (this.routePolyline) {
            this.map.removeLayer(this.routePolyline);
        }

        // Couleur selon le mode
        let routeColor = '#8B5CF6';
        switch (mode) {
            case 'running':
                routeColor = '#EF4444'; // Rouge pour course
                break;
            case 'cycling':
                routeColor = '#10B981'; // Vert pour v√©lo
                break;
            case 'walking':
            default:
                routeColor = '#8B5CF6'; // Violet pour marche
                break;
        }

        // Cr√©er la polyline
        this.routePolyline = L.polyline(route, {
            color: routeColor,
            weight: 4,
            opacity: 0.8,
            smoothFactor: 1
        }).addTo(this.map);

        // Ajouter des marqueurs aux points cl√©s
        const midPoint = Math.floor(route.length / 2);
        if (route[midPoint]) {
            L.circleMarker(route[midPoint], {
                radius: 6,
                fillColor: routeColor,
                color: 'white',
                weight: 2,
                opacity: 1,
                fillOpacity: 0.8
            }).addTo(this.map).bindPopup(`Point interm√©diaire`);
        }

        // Ajuster la vue
        this.map.fitBounds(this.routePolyline.getBounds(), { 
            padding: [20, 20] 
        });

        // Afficher le panel d'informations sur la carte
        this.showRouteInfoPanel();
    }

    createTestRoute() {
        // M√©thode obsol√®te - remplac√©e par createSmartRoute
        console.warn('createTestRoute est obsol√®te, utiliser createSmartRoute');
    }

    showResults(route, targetDistance, mode) {
        const resultsSection = document.getElementById('resultsSection');
        if (resultsSection) {
            resultsSection.style.display = 'block';
        }

        // Calculer les statistiques r√©elles
        const actualDistance = this.lastRouteDistance || this.calculateRouteDistance(route);
        const duration = this.calculateDuration(actualDistance, mode);
        const deviation = Math.abs(actualDistance - targetDistance);

        // Mettre √† jour les statistiques
        const distanceResult = document.getElementById('distanceResult');
        const durationResult = document.getElementById('durationResult');
        const deviationResult = document.getElementById('deviationResult');

        if (distanceResult) distanceResult.textContent = `${actualDistance.toFixed(1)} km`;
        if (durationResult) durationResult.textContent = this.formatDuration(duration);
        if (deviationResult) deviationResult.textContent = `${deviation.toFixed(1)} km`;

        console.log(`üìä Statistiques: ${actualDistance.toFixed(1)}km en ${this.formatDuration(duration)}`);
    }

    /**
     * Affiche le panel d'informations sur la carte
     */
    showRouteInfoPanel() {
        const routeInfoPanel = document.getElementById('routeInfoPanel');
        if (!routeInfoPanel) return;

        const actualDistance = this.lastRouteDistance || this.calculateRouteDistance(this.routePolyline.getLatLngs());
        const mode = document.querySelector('input[name="travelMode"]:checked')?.value || 'walking';
        const duration = this.calculateDuration(actualDistance, mode);

        // Mettre √† jour les informations dans le panel de la carte
        const routeDistance = document.getElementById('routeDistance');
        const routeDuration = document.getElementById('routeDuration');

        if (routeDistance) routeDistance.textContent = `${actualDistance.toFixed(1)} km`;
        if (routeDuration) routeDuration.textContent = this.formatDuration(duration);

        // Afficher le panel
        routeInfoPanel.classList.add('show');
    }

    /**
     * Masque le panel d'informations sur la carte
     */
    hideRouteInfoPanel() {
        const routeInfoPanel = document.getElementById('routeInfoPanel');
        if (routeInfoPanel) {
            routeInfoPanel.classList.remove('show');
        }
    }

    /**
     * Calcule la dur√©e estim√©e selon le mode et la distance
     */
    calculateDuration(distance, mode) {
        // Vitesses moyennes r√©alistes en km/h
        const speeds = {
            walking: 4.5,   // Marche normale
            running: 8.5,   // Course loisir moyenne
            cycling: 18     // V√©lo loisir en ville
        };

        const speed = speeds[mode] || speeds.walking;
        return (distance / speed) * 60; // Dur√©e en minutes
    }

    /**
     * Formate la dur√©e en format lisible
     */
    formatDuration(minutes) {
        if (minutes < 60) {
            return `${Math.round(minutes)} min`;
        } else {
            const hours = Math.floor(minutes / 60);
            const remainingMinutes = Math.round(minutes % 60);
            if (remainingMinutes === 0) {
                return `${hours}h`;
            } else {
                return `${hours}h${remainingMinutes}`;
            }
        }
    }

    useCurrentLocation() {
        console.log('üìç Obtention de la position...');
        
        if (!navigator.geolocation) {
            this.showError('La g√©olocalisation n\'est pas support√©e');
            return;
        }

        navigator.geolocation.getCurrentPosition(
            (position) => {
                const latlng = L.latLng(position.coords.latitude, position.coords.longitude);
                this.setStartPoint(latlng);
                this.map.setView(latlng, 15);
                console.log('‚úÖ Position obtenue:', latlng);
            },
            (error) => {
                this.showError('Impossible d\'obtenir votre position');
                console.error('‚ùå Erreur g√©olocalisation:', error);
            }
        );
    }

    exportGPX() {
        console.log('üìÅ Export GPX...');
        if (!this.routePolyline) {
            this.showError('Aucun parcours √† exporter');
            return;
        }

        // Export GPX simple
        const points = this.routePolyline.getLatLngs();
        let gpx = '<?xml version="1.0" encoding="UTF-8"?>\n';
        gpx += '<gpx version="1.1">\n';
        gpx += '<trk><name>Parcours RunMyWay</name><trkseg>\n';
        
        points.forEach(point => {
            gpx += `<trkpt lat="${point.lat}" lon="${point.lng}"></trkpt>\n`;
        });
        
        gpx += '</trkseg></trk>\n</gpx>';

        const blob = new Blob([gpx], { type: 'application/gpx+xml' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'parcours-runmyway.gpx';
        a.click();
        URL.revokeObjectURL(url);

        console.log('‚úÖ GPX export√©');
    }

    /**
     * Centre la carte sur le parcours
     */
    centerMapOnRoute() {
        if (this.routePolyline) {
            this.map.fitBounds(this.routePolyline.getBounds(), { 
                padding: [20, 20] 
            });
        } else if (this.startPoint) {
            this.map.setView(this.startPoint, 15);
        }
    }

    /**
     * Toggle plein √©cran (basique)
     */
    toggleFullscreen() {
        const mapContainer = document.getElementById('mapContainer');
        if (!document.fullscreenElement) {
            mapContainer.requestFullscreen?.() || 
            mapContainer.webkitRequestFullscreen?.() || 
            mapContainer.msRequestFullscreen?.();
        } else {
            document.exitFullscreen?.() || 
            document.webkitExitFullscreen?.() || 
            document.msExitFullscreen?.();
        }
    }

    reset() {
        console.log('üîÑ Remise √† z√©ro...');
        
        // Supprimer les marqueurs
        if (this.startMarker) {
            this.map.removeLayer(this.startMarker);
            this.startMarker = null;
        }
        if (this.endMarker) {
            this.map.removeLayer(this.endMarker);
            this.endMarker = null;
        }
        
        // Supprimer le parcours
        if (this.routePolyline) {
            this.map.removeLayer(this.routePolyline);
            this.routePolyline = null;
        }

        // Reset des points et POI
        this.startPoint = null;
        this.endPoint = null;
        
        // Masquer le panel d'informations
        this.hideRouteInfoPanel();
        
        // Nettoyer les POI
        this.pois.forEach(poi => this.removePOIMarker(poi));
        this.pois = [];
        this.updatePOIChips();
        
        // D√©sactiver tous les presets POI
        document.querySelectorAll('.preset-btn').forEach(btn => {
            btn.classList.remove('active');
        });

        // Masquer les r√©sultats
        const resultsSection = document.getElementById('resultsSection');
        if (resultsSection) {
            resultsSection.style.display = 'none';
        }

        // Reset des champs d'adresse et POI
        const startAddress = document.getElementById('startAddress');
        const endAddress = document.getElementById('endAddress');
        const poiInput = document.getElementById('poiInput');
        if (startAddress) startAddress.value = '';
        if (endAddress) endAddress.value = '';
        if (poiInput) poiInput.value = '';
        
        // Masquer les suggestions
        this.hideSuggestions(document.getElementById('startAddressSuggestions'));
        this.hideSuggestions(document.getElementById('endAddressSuggestions'));
        this.hideSuggestions(document.getElementById('poiSuggestions'));

        // Masquer les boutons de suppression
        this.toggleClearButton('clearStartBtn', false);
        this.toggleClearButton('clearEndBtn', false);

        // Recentrer sur Paris
        this.map.setView([48.8566, 2.3522], 12);
        
        console.log('‚úÖ Application remise √† z√©ro');
    }

    showLoading() {
        const loadingOverlay = document.getElementById('loadingOverlay');
        if (loadingOverlay) {
            loadingOverlay.style.display = 'flex';
        }
    }

    hideLoading() {
        const loadingOverlay = document.getElementById('loadingOverlay');
        if (loadingOverlay) {
            loadingOverlay.style.display = 'none';
        }
    }

    showError(message) {
        const errorAlert = document.getElementById('errorAlert');
        const errorMessage = document.getElementById('errorMessage');
        
        if (errorAlert && errorMessage) {
            errorMessage.textContent = message;
            errorAlert.style.display = 'block';
            
            setTimeout(() => {
                errorAlert.style.display = 'none';
            }, 5000);
        }
        
        console.error('Erreur:', message);
    }

    /**
     * Nettoie le cache pour √©viter l'accumulation
     */
    cleanupCache() {
        const maxCacheSize = 100;
        
        if (this.snapCache.size > maxCacheSize) {
            const keys = Array.from(this.snapCache.keys());
            const keysToDelete = keys.slice(0, keys.length - maxCacheSize);
            keysToDelete.forEach(key => this.snapCache.delete(key));
            console.log(`üßπ Cache nettoy√©: ${keysToDelete.length} entr√©es supprim√©es`);
        }
        
        if (this.routeCache.size > maxCacheSize) {
            const keys = Array.from(this.routeCache.keys());
            const keysToDelete = keys.slice(0, keys.length - maxCacheSize);
            keysToDelete.forEach(key => this.routeCache.delete(key));
            console.log(`üßπ Cache routes nettoy√©: ${keysToDelete.length} entr√©es supprim√©es`);
        }
    }
}

// Initialisation de l'application
document.addEventListener('DOMContentLoaded', function() {
    console.log('üì¶ DOM charg√©, initialisation...');
    
    if (typeof L === 'undefined') {
        console.error('‚ùå Leaflet non charg√©');
        return;
    }
    
    window.runMyWayApp = new MakeMyWayApp();
    window.runMyWayApp.init();
});

console.log('üì¶ Script MakeMyWay charg√©');